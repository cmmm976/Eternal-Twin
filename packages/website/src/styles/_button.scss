/* --- MAIN BUTTONS --- */

// THERE ARE 4 DISTINCT BUTTON STYLES:
// - PRIMARY (default), for call-to-action buttons. Should be used in limited amount to lead users to specific destinations.
// - SECONDARY, for alternative actions. Can be used when similar actions are proposed, or as alternatives.
// - TERTIARY, for repulsive or minimal actions. Can be used when the button implies a "step back" or "step out" action.
//- AGGRESSIVE, for irreversible and negative actions. MUST be used carefully, and very explicitely describe the action consequences.

// BUTTONS CAN ALSO HAVE ADDITIONAL STYLES:
// - DISABLED, for (yet) unavailable actions.
// - ICON, for icon-only buttons. Don't forget to add an "alt" text in case the image cannot load.
// - MULTI (applied to the parent ".actionBox" div) to create a visually linked buttons bar.

.content {
  .box, .actionBox {
    // default boxes for flex elements. ActionBox must be wrapped in a box, and btn wrapped in an actionBox

    display: flex;
    flex-wrap: wrap;
    margin: .65em 0 1.2em 0;
    justify-content: flex-start;
    align-items: flex-start;

    & > .box, & > .actionBox, & > .btn {
      flex: 1;
      flex-basis: 0;
    }

    &.left {   justify-content: flex-start; }
    &.right {  justify-content: flex-end; }
    &.center { justify-content: center; }

    & > div:not(.actionBox), & > .box { margin: 0; }
    &.half {
      border: 1px solid red;
    }

    &.reverseWrap {
      flex-wrap: wrap-reverse;
    }

    &.multi {
      flex-direction: row !important;
    }

    & .box, & .actionBox { margin-top: 0; margin-bottom: 0; }

  }

  .actionBox {
    // two actionBox in a box will automatically balance their content left and right

    margin-left: (-$gutterWidth / 2);
    margin-right: (-$gutterWidth / 2);

    & + .actionBox { justify-content: flex-end; }

    @media only screen and (max-width: $desktopBreakpoint) {
      min-width: 100% !important;
      margin-right: (-$gutterWidth / 2) !important;
      margin-left: (-$gutterWidth / 2) !important;
      .btn:not(:only-child) {
        max-width: 100% ;
      }
    }

    @media only screen and (max-width: $desktopBreakpoint / 2) {
      .btn {
        max-width: 100% ;
      }
    }

    .actionBox:first-child:not(:only-child) { margin-right: 0; }
    .actionBox:last-child:not(:only-child) { margin-left: 0; }

  }

  .btn {
    &:not(.icon) > img { padding: 0 0.35rem 0 0; }
    &.icon { padding: .7em; }

    &.size0 { flex: 0  ; min-width: max-content; }
    &.size1 { flex: 1 1; min-width: max-content; }
    &.size2 { flex: 2 1; min-width: max-content; }
    &.size3 { flex: 3 1; min-width: max-content; }
    &.size4 { flex: 4 1; min-width: max-content; }
    &.size5 { flex: 5 1; min-width: max-content; }
    &.size6 { flex: 6 1; min-width: max-content; }

    max-width: max-content;
    z-index: 2;
    font-size: .86rem;
    line-height: 1.15em;
    color: $lightWhite;
    font-weight: 800;
    text-transform: uppercase;
    text-decoration: none;
    text-align: center;
    letter-spacing: 0.08em;
    white-space: normal;

    align-items: center;
    display: inline-flex;
    justify-content: center;

    min-height: 2.5em;
    padding: .7em 1.7em;
    margin: ($gutterWidth / 2);
    cursor: pointer;
    background-color: $darkViolet;
    border-radius: .25em;
    outline: none;
    box-shadow:
      0 3px 0 0 $deepBlack,
      inset 0 0 0 2px transparentize($lightWhite, .93); /*Inset shadow, simulates a white border*/

    transition: all 0.25s, box-shadow 0.45s;

    &:not([disabled]):not(.disabled) {
      &:hover, &:focus {
        z-index: 1;
        transform: translate(0, 1px);
        background-color: darken(saturate($darkViolet, 8.50), 3.7);
        box-shadow:
          0 1px 0 0 $deepBlack,
          inset 0 0 0 2px transparentize($lightWhite, .9);
      }

      &:active {
        z-index: 1;
        transform: translate(0, 2px);
        background-color: darken(saturate($darkViolet, 13), 5.3);
        box-shadow:
          0 -2px 0 0 $deepBlack,
          inset 0 0 0 2px transparentize($lightWhite, .9);
      }
    }

    &.secondary {
      font-weight: 600;
      background-color: $darkGrey;

      &:not([disabled]):not(.disabled) {
        &:hover, &:focus {
          background-color: darken($darkGrey, 4);
        }

        &:active {
          background-color: darken($darkGrey, 5.5);
        }
      }
    }

    &.tertiary {
      font-weight: 600;
      color: $lightGrey;
      background: none;
      box-shadow:
        0 0 0 1px transparentize($deepBlack, 1),
        inset 0 0 0 2px transparentize($darkGrey, .65); /*Inset shadow, simulates a white border*/
      transform: none !important;

      &:not([disabled]):not(.disabled) {
        &:hover, &:focus {
          color: $lightWhite;
          background: none;
          box-shadow:
            0 0 0 1px transparentize($deepBlack, .7),
            inset 0 0 0 2px transparentize($lightWhite, .9);
        }

        &:active {
          color: $lightWhite;
          background: transparentize($lightWhite, .98);
          box-shadow:
            0 0 0 1px transparentize($deepBlack, .7),
            inset 0 0 0 2px transparentize($lightWhite, .85);
        }
      }
      &[disabled], &.disabled {
        box-shadow:
          0 0 0 1px transparentize($deepBlack, 1),
          inset 0 0 0 2px transparentize($darkGrey, .65);
      }
    }

    &.aggressive {
      font-weight: 800;
      background-color: $darkRed;

      &:not([disabled]):not(.disabled) {
        &:hover, &:focus {
          background-color: darken(saturate($darkRed, 15.5), 3.3);
        }

        &:active {
          background-color: darken(saturate($darkRed, 20), 5.5);
        }
      }
    }

    &[disabled], &.disabled {
      font-weight: 600;
      color: lighten($lightGrey, 5);
      background-color: $darkGrey;
      background-image: linear-gradient(135deg,
        $darkGrey 16.67%,
        $deepGrey 16.67%,
        $deepGrey 50%,
        $darkGrey 50%,
        $darkGrey 66.67%,
        $deepGrey 66.67%,
        $deepGrey 100%);   /*diagonal gradient to create a stripes effect background*/
      background-size: 12px 12px;
      box-shadow:
        0 1px 0 1px $deepBlack,
        inset 0 0 0 2px $darkGrey;  /*Inset shadow, simulates a white border*/
      cursor: not-allowed;

      transition: background-image .25s;

      &:hover, &:focus, &:active {
        background-image: linear-gradient(135deg,
          $darkGrey 16.67%,
          $deepGrey 16.67%,
          $deepGrey 50%,
          $darkGrey 50%,
          $darkGrey 66.67%,
          $deepGrey 66.67%,
          $deepGrey 100%);  /*Stripes background*/
        box-shadow:
          0 1px 0 1px $deepBlack,
          inset 0 0 0 2px $darkGrey, 2%;  /*Inset shadow, simulates a white border*/
      }
    }
  }

  .actionBox.multi .btn, .btn.multi {
    border-radius: 0;
    margin: ($gutterWidth / 2) -1px;
    clip-path: inset(-4px 1px -4px -4px);
    -webkit-clip-path: inset(-4px 1px -4px -4px);

    &:first-child {
      border-radius: 4px 0 0 4px;
      margin-left: ($gutterWidth / 2);
    }

    &:last-child {
      border-radius: 0 4px 4px 0;
      margin-right: ($gutterWidth / 2);
      clip-path: inset(-4px -4px -4px -4px);
      -webkit-clip-path: inset(-4px -4px -4px -4px);
    }

    &:hover, &:focus, &:active {
      clip-path: inset(-4px -4px -4px -4px);
      -webkit-clip-path: inset(-4px -4px -4px -4px);
    }
  }
  
  .toolbar{
    .btn {
      font-weight: normal;
      padding: 0;
      max-width: 2.5em;
      width: 2.5em;
      height: 2.5em;
      border: none;
      margin: 0 0.1em;
    }
    
    .btn:hover{
      transform: none !important;
    }
  }
}

etwin-small-layout {
  .content .actionBox .btn {
    min-width: calc(100% - 8px);
  }
}
